// Default to /tmp directory if $VSC_SCRATCH scratch env is not available,
// see: https://github.com/nf-core/configs?tab=readme-ov-file#adding-a-new-config
scratch_dir   = System.getenv("VSC_SCRATCH") ?: "/tmp"
tier1_project = System.getenv("SLURM_ACCOUNT") ?: null

// Perform work directory cleanup when the run has succesfully completed
// cleanup = true

// Reduce the job submit rate to about 50 per minute, this way the server won't be bombarded with jobs
// Limit queueSize to keep job rate under control and avoid timeouts
executor {
    submitRateLimit = '50/1min'
    queueSize = 30
    exitReadTimeout = "10min"
}

// Add backoff strategy to catch cluster timeouts and proper symlinks of files in scratch to the work directory
process {
    executor      = 'slurm'
    stageInMode   = "symlink"
    stageOutMode  = "rsync"
    errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
    maxRetries    = 3
    array         = 50
}

// Specify that singularity should be used and where the cache dir will be for the images
singularity {
    enabled = true
    autoMounts = true
    cacheDir = "$scratch_dir/.singularity"
}

params {
    config_profile_contact     = 'GitHub: @Joon-Klaps - Email: joon.klaps@kuleuven.be'
    config_profile_url         = 'https://docs.vscentrum.be/en/latest/index.html'
}

env {
    APPTAINER_TMPDIR="$scratch_dir/.apptainer/tmp"
    APPTAINER_CACHEDIR="$scratch_dir/.apptainer/cache"
}

// AWS maximum retries for errors (This way the pipeline doesn't fail if the download fails one time)
aws {
    maxErrorRetry = 3
}

// Define profiles for each cluster
profiles {
    genius {
        params.config_profile_description = 'genius profile for use on the genius cluster of the VSC HPC.'

        process {
            // 768 - 65 so 65GB for overhead, max is 720000MB
            resourceLimits = [ memory: 703.GB, cpus: 36, time: 168.h ]
            clusterOptions = { "--clusters=genius --account=$tier1_project" }

            withLabel: '.*gpu.*'{
                beforeScript   = 'module load cuDNN/8.4.1.50-CUDA-11.7.0'
                clusterOptions = { "--gpus-per-node=${task.cpus < 18 ? 1 : 2} --clusters=genius --account=$tier1_project" }

                queue = {
                    switch (task.memory) {
                            case { it >=  175.GB }: // max is 180000
                                return task.time >= 72.h ? 'gpu_v100_long' : 'gpu_v100'
                            default:
                                return task.time >= 72.h ? 'gpu_p100_long,amd_long' : 'gpu_p100,amd'
                        }
                }
            }

            queue = {
                switch (task.memory) {
                    case { it >=  175.GB }: // max is 180000
                        return task.time >= 72.h ? 'dedicated_big_bigmem,dedicated_big_batch,bigmem_long' : 'bigmem'
                    default:
                        return task.time >= 72.h ? 'batch_long' : 'batch'
                }
            }
        }
    }


    genius_gpu {

        params.config_profile_description = 'genius_gpu profile for use on the genius cluster of the VSC HPC.'

        docker.runOptions       = '-u $(id -u):$(id -g) --gpus all'
        apptainer.runOptions    = '--containall --cleanenv --nv'
        singularity.runOptions  = '--containall --cleanenv --nv'

        process {
            // 768 - 65 so 65GB for overhead, max is 720000MB
            resourceLimits = [ memory: 703.GB, cpus: 36, time: 168.h]
            beforeScript   = 'module load cuDNN/8.4.1.50-CUDA-11.7.0'
            clusterOptions = { "--gpus-per-node=${task.cpus < 18 ? 1 : 2} --clusters=genius --account=$tier1_project" }

            queue = {
                switch (task.memory) {
                    case { it >=  175.GB }: // max is 180000
                        return task.time >= 72.h ? 'gpu_v100_long' : 'gpu_v100'
                    default:
                        return task.time >= 72.h ? 'gpu_p100_long,amd_long' : 'gpu_p100,amd'
                }
            }
        }
    }

    wice {
        params.config_profile_description = 'wice profile for use on the Wice cluster of the VSC HPC.'

        process {
            clusterOptions = { "--clusters=wice --account=$tier1_project"}
            // max is 2016000
            resourceLimits = [ memory: 1968.GB, cpus: 72, time: 168.h ]

            queue = {
                    switch (task.memory) {
                        case { it >=  239.GB }:  // max is 244800
                            return task.time >= 72.h ? 'dedicated_big_bigmem' : 'bigmem,hugemem'
                        default:
                            return task.time >= 72.h ?  'batch_long,batch_icelake_long,batch_sapphirerapids_long': 'batch,batch_sapphirerapids,batch_icelake'
                    }
            }

            withLabel: '.*gpu.*'{
                beforeScript   = 'module load cuDNN/8.4.1.50-CUDA-11.7.0'
                resourceLimits = [ memory: 703.GB, cpus: 64, time: 168.h ]
                clusterOptions = { "--gpus-per-node=${task.cpus < 32 ? 1 : 2} --clusters=genius --account=$tier1_project" }

                queue = {
                    switch (task.memory) {
                        case { it >=  239.GB }:  // max is 244800
                            return task.time >= 72.h ? 'dedicated_big_gpu_h100' : 'gpu_h100'
                        default:
                            return task.time >= 72.h ? 'dedicated_big_gpu': 'gpu_a100,gpu'
                    }
                }
            }
        }
    }


    wice_gpu {

        params.config_profile_description = 'wice_gpu profile for use on the genius cluster of the VSC HPC.'

        docker.runOptions       = '-u $(id -u):$(id -g) --gpus all'
        apptainer.runOptions    = '--containall --cleanenv --nv'
        singularity.runOptions  = '--containall --cleanenv --nv'

        process {
            // 768 - 65 so 65GB for overhead, max is 720000MB
            resourceLimits = [ memory: 703.GB, cpus: 64, time: 168.h ]
            beforeScript   = 'module load cuDNN/8.4.1.50-CUDA-11.7.0'
            clusterOptions = { "--gpus-per-node=${task.cpus < 32 ? 1 : 2} --clusters=genius --account=$tier1_project" }

            queue = {
                switch (task.memory) {
                    case { it >=  478.GB }:  // max is 489600
                        return task.time >= 72.h ? 'dedicated_big_gpu_h100' : 'gpu_h100'
                    default:
                        return task.time >= 72.h ? 'dedicated_big_gpu': 'gpu_a100,gpu'
                }
            }
        }
    }

    superdome {
        params.config_profile_description = 'superdome profile for use on the genius cluster of the VSC HPC.'

        process {
            clusterOptions = {"--clusters=genius --account=$tier1_project"}
            // 6000 - 228 so 228GB for overhead, max is 5910888MB
            resourceLimits = [ memory: 5772.GB, cpus: 14, time: 168.h]

            queue = { task.time <= 72.h ? 'superdome' : 'superdome_long' }
        }
    }
}


